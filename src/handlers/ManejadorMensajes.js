const { identificarUsuario, guardarEnHistorial, leerHistorialUsuario } = require('../utils/gestionUsuarios');
const { obtenerRespuestaGPT } = require('../utils/openaiClient');
const {
  buscarFragmentosRelevantes,
  buscarInformacionUnidad,
  buscarInformacionRequisitos,
  buscarCursosQueTienenComoRequisito,
  buscarCursosPosteriores,
  responderPreguntaGeneralMalla,
  buscarCursoPorNombreAproximado,
  buscarCursosDependientes,
  cursosInicioMalla,
  cursosConMasPrerrequisitos
} = require('../utils/busquedaSemantica');
const path = require('path');
const { MessageMedia } = require('whatsapp-web.js');
const fs = require('fs');

/**
 * Limpia el n√∫mero de WhatsApp removiendo el sufijo @c.us
 * @param {string} numero - N√∫mero con formato de WhatsApp (ej: 51929486812@c.us)
 * @returns {string} N√∫mero limpio (ej: 51929486812)
 */
function limpiarNumero(numero) {
    return numero.replace('@c.us', '');
}

const UMBRAL_SIMILITUD = 0.25; // Umbral ajustado para capturar informaci√≥n relevante

/**
 * Maneja un mensaje entrante de WhatsApp.
 * - Identifica el usuario por n√∫mero (solo usuarios existentes).
 * - Guarda el mensaje recibido en el historial.
 * - Responde de forma personalizada si el usuario dice 'hola'.
 * - Usa GPT para otros mensajes.
 * - Guarda la respuesta del bot en el historial.
 * @param {object} client - Instancia de WWebJS client.
 * @param {string} numero - N√∫mero de tel√©fono del usuario.
 * @param {string} mensaje - Mensaje recibido del usuario.
 */
async function manejarMensaje(client, numero, mensaje) {
  console.log('DEBUG manejarMensaje argumentos:', {
    clientType: typeof client,
    numero,
    mensaje
  });
  // 1. Limpiar n√∫mero y identificar usuario
  const numeroLimpio = limpiarNumero(numero);
  console.log(`üîç Buscando usuario con n√∫mero: ${numeroLimpio}`);
  
  const usuario = identificarUsuario(numeroLimpio);
  console.log(`üë§ Usuario encontrado:`, JSON.stringify(usuario, null, 2));

  // 2. Verificar si el usuario existe
  if (!usuario) {
    const respuestaBot = `‚ùå Lo siento, tu n√∫mero no est√° registrado en el sistema. Este asistente es exclusivo para estudiantes del curso de Ingenier√≠a de Sistemas de Informaci√≥n.`;
    guardarEnHistorial(numeroLimpio, mensaje, 'usuario');
    guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
    return respuestaBot;
  }

  // 3. Guardar mensaje recibido en historial
  guardarEnHistorial(numeroLimpio, mensaje, 'usuario');

  // 4. L√≥gica espec√≠fica seg√∫n el rol del usuario
  let respuestaBot;
  
  // Si es docente, manejar respuestas espec√≠ficas para docente
  if (usuario.rol === 'docente') {
    if (mensaje.trim().toLowerCase() === 'hola') {
      const nombre = usuario.nombre.nombres.split(' ')[0];
      respuestaBot = `¬°Hola, Ing. ${nombre}! Soy ISIUX, su asistente acad√©mico. ¬øEn qu√© puedo ayudarle hoy?`;
    } else if (/c[o√≥]mo\s+te\s+llamas|cu[a√°]l\s+es\s+tu\s+nombre|qui[e√©]n\s+eres|quien\s+eres/i.test(mensaje)) {
      respuestaBot = "Me llamo ISIUX, su asistente acad√©mico para el curso de Ingenier√≠a de Sistemas de Informaci√≥n.";
    } else if (/qu[e√©]\s+curso\s+ense√±o|qu[e√©]\s+curso\s+dicto|qu[e√©]\s+curso\s+imparto/i.test(mensaje)) {
      respuestaBot = "Usted dicta el curso de Ingenier√≠a de Sistemas de Informaci√≥n (c√≥digo: 101029) en el ciclo VII, secci√≥n B.";
    } else if (/qu[e√©]\s+temas?\s+me\s+toca\s+ense√±ar|qu[e√©]\s+temas?\s+ense√±o\s+hoy|qu[e√©]\s+contenido\s+imparto/i.test(mensaje)) {
      respuestaBot = "Para consultar los temas espec√≠ficos del d√≠a, necesitar√≠a saber qu√© semana o unidad est√° desarrollando actualmente. Puede consultar el syllabus del curso para ver el cronograma detallado.";
    } else if (/en\s+qu[e√©]\s+aula\s+tengo\s+clase|d[o√≥]nde\s+es\s+mi\s+clase|qu[e√©]\s+aula\s+uso/i.test(mensaje)) {
      respuestaBot = "Sus clases se dictan en:\n‚Ä¢ Martes: Aula 404 (cuarto piso)\n‚Ä¢ Mi√©rcoles: Aula 403 (cuarto piso)";
    } else if (/cu[a√°]l\s+es\s+mi\s+horario|qu[e√©]\s+horario\s+tengo|cu[a√°]ndo\s+es\s+mi\s+clase/i.test(mensaje)) {
      respuestaBot = "Su horario de clases es:\n‚Ä¢ Martes: 19:40 - 21:20 (Teor√≠a)\n‚Ä¢ Mi√©rcoles: 18:00 - 20:30 (Pr√°ctica)";
    } else if (/qu[e√©]\s+secci[o√≥]n\s+tengo\s+a\s+cargo|de\s+qu[e√©]\s+secci[o√≥]n\s+soy\s+responsable/i.test(mensaje)) {
      respuestaBot = "Usted tiene a cargo la Secci√≥n B del curso de Ingenier√≠a de Sistemas de Informaci√≥n.";
    } else if (/cu[a√°]ntos?\s+estudiantes?\s+tengo|cu[a√°]ntos?\s+alumnos?\s+tengo/i.test(mensaje)) {
      respuestaBot = "Usted tiene 30 estudiantes registrados en la Secci√≥n B del curso de Ingenier√≠a de Sistemas de Informaci√≥n.";
    } else if (/qu[e√©]\s+materiales?\s+necesito|qu[e√©]\s+materiales?\s+requiero/i.test(mensaje)) {
      respuestaBot = "Para consultar los materiales espec√≠ficos, puede revisar el syllabus del curso o consultar qu√© unidad est√° desarrollando actualmente.";
    } else {
      // Para otras preguntas del docente, usar b√∫squeda sem√°ntica
      const fragmentos = await buscarFragmentosRelevantes(mensaje, undefined, 3);
      const fragmentosFiltrados = fragmentos.filter(f => f.similitud >= UMBRAL_SIMILITUD);
      
      if (fragmentosFiltrados.length > 0) {
        const contexto = fragmentosFiltrados.map(f => f.text || f.texto || f.contenido || '').join('\n').trim();
        const prompt = `Usted es un asistente acad√©mico respondiendo a un docente. Responda de forma profesional y respetuosa usando SOLO esta informaci√≥n interna. Si la respuesta no est√° en el contexto, responda: "No tengo informaci√≥n espec√≠fica sobre eso en mi base de datos".\n\nContexto:\n${contexto}\n\nPregunta del docente: ${mensaje}`;
        respuestaBot = await obtenerRespuestaGPT(prompt);
      } else {
        respuestaBot = "No tengo informaci√≥n espec√≠fica sobre eso en mi base de datos. ¬øPuede reformular su pregunta o consultar sobre otro aspecto del curso?";
      }
    }
  } else {
    // L√≥gica para estudiantes (c√≥digo existente)
    if (mensaje.trim().toLowerCase() === 'hola') {
      // Extraer primer nombre de la estructura de datos del usuario
      let nombre = numeroLimpio; // Por defecto usa el n√∫mero
      
      if (usuario.nombre && usuario.nombre.nombres) {
        // Extraer solo el primer nombre
        nombre = usuario.nombre.nombres.split(' ')[0];
        console.log(`‚úÖ Usando nombre: ${nombre}`);
      } else {
        console.log(`‚ùå No se encontr√≥ nombre en el usuario`);
      }
      
      respuestaBot = `¬°Hola, ${nombre}! ¬øEn qu√© puedo ayudarte hoy?`;
    } else if (/c[o√≥]mo\s+te\s+llamas|cu[a√°]l\s+es\s+tu\s+nombre|qui[e√©]n\s+eres|quien\s+eres/i.test(mensaje)) {
      respuestaBot = "Me llamo ISIUX, tu asistente acad√©mico para el curso de Ingenier√≠a de Sistemas de Informaci√≥n.";
    } else {
      try {
        // --- FLUJO: √öltima pregunta/interacci√≥n ---
        const regexUltimaPregunta = /(qu√©|cual)[^?]*pregunt[√©e] (hace un momento|antes|la vez pasada|reci√©n|√∫ltima|ultima|anterior|√∫ltimo|ultimo|previamente)/i;
        if (regexUltimaPregunta.test(mensaje)) {
          const historial = leerHistorialUsuario(numeroLimpio);
          // Buscar la √∫ltima pregunta del usuario antes de este mensaje
          let idx = historial.length - 1;
          // Saltar el mensaje actual
          idx--;
          while (idx >= 0 && historial[idx].tipo !== 'usuario') {
            idx--;
          }
          if (idx >= 0) {
            respuestaBot = `Tu √∫ltima pregunta fue: "${historial[idx].mensaje}"`;
          } else {
            respuestaBot = 'No encontr√© ninguna pregunta anterior en tu historial.';
          }
          guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
          return respuestaBot;
        }

        // --- FLUJO: Resumen de historial por fecha o rango ---
        const regexResumenFecha = /(resumen|res√∫meme|resumeme|de qu√© hablamos|que temas tratamos|que hablamos|que conversamos|que se habl√≥|que se hablo|hazme un resumen)[^\d]*(ayer|hoy|anoche|esta semana|la semana pasada|el lunes|el martes|el mi√©rcoles|el jueves|el viernes|el s√°bado|el domingo|\d{1,2} de [a-zA-Z]+|\d{1,2}\/\d{1,2}(?:\/\d{2,4})?)/i;
        if (regexResumenFecha.test(mensaje)) {
          const historial = leerHistorialUsuario(numeroLimpio);
          // Extraer fecha o palabra clave
          const match = mensaje.match(regexResumenFecha);
          let fechaTexto = match ? match[2] : '';
          let fechas = [];
          const hoy = new Date();
          if (/ayer/i.test(fechaTexto)) {
            const d = new Date(hoy);
            d.setDate(hoy.getDate() - 1);
            fechas = [d.toISOString().slice(0, 10)];
          } else if (/hoy/i.test(fechaTexto)) {
            fechas = [hoy.toISOString().slice(0, 10)];
          } else if (/anoche/i.test(fechaTexto)) {
            const d = new Date(hoy);
            d.setDate(hoy.getDate() - 1);
            fechas = [d.toISOString().slice(0, 10)];
          } else if (/semana pasada/i.test(fechaTexto)) {
            const d = new Date(hoy);
            d.setDate(hoy.getDate() - 7);
            for (let i = 0; i < 7; i++) {
              const day = new Date(d);
              day.setDate(d.getDate() + i);
              fechas.push(day.toISOString().slice(0, 10));
            }
          } else if (/esta semana/i.test(fechaTexto)) {
            const d = new Date(hoy);
            d.setDate(hoy.getDate() - hoy.getDay());
            for (let i = 0; i < 7; i++) {
              const day = new Date(d);
              day.setDate(d.getDate() + i);
              fechas.push(day.toISOString().slice(0, 10));
            }
          } else if (/\d{1,2} de [a-zA-Z]+/i.test(fechaTexto)) {
            // Ejemplo: 10 de julio
            const meses = ['enero','febrero','marzo','abril','mayo','junio','julio','agosto','septiembre','octubre','noviembre','diciembre'];
            const m = fechaTexto.match(/(\d{1,2}) de ([a-zA-Z]+)/i);
            if (m) {
              const dia = parseInt(m[1]);
              const mes = meses.findIndex(mes => mes.startsWith(m[2].toLowerCase()));
              const anio = hoy.getFullYear();
              if (mes >= 0) {
                const fecha = new Date(anio, mes, dia);
                fechas = [fecha.toISOString().slice(0, 10)];
              }
            }
          } else if (/\d{1,2}\/\d{1,2}(?:\/\d{2,4})?/.test(fechaTexto)) {
            // Ejemplo: 10/07 o 10/07/2025
            const m = fechaTexto.match(/(\d{1,2})\/(\d{1,2})(?:\/(\d{2,4}))?/);
            if (m) {
              const dia = parseInt(m[1]);
              const mes = parseInt(m[2]) - 1;
              const anio = m[3] ? parseInt(m[3]) : hoy.getFullYear();
              const fecha = new Date(anio, mes, dia);
              fechas = [fecha.toISOString().slice(0, 10)];
            }
          }
          // Filtrar mensajes del usuario en esas fechas
          const mensajes = historial.filter(h => h.tipo === 'usuario' && fechas.includes((new Date(h.fecha)).toISOString().slice(0, 10)));
          if (mensajes.length === 0) {
            respuestaBot = 'No encontr√© mensajes tuyos en esa fecha.';
          } else if (mensajes.length === 1) {
            respuestaBot = `Ese d√≠a me preguntaste: "${mensajes[0].mensaje}"`;
          } else {
            // Si hay muchos mensajes, hacer resumen con GPT si est√° disponible
            const preguntas = mensajes.map(h => h.mensaje);
            if (typeof obtenerRespuestaGPT === 'function') {
              const prompt = `Haz un resumen breve y claro de los siguientes mensajes de un usuario en una conversaci√≥n acad√©mica:\n\n${preguntas.map((p,i)=>`Mensaje ${i+1}: ${p}`).join('\n')}\n\nResumen:`;
              respuestaBot = await obtenerRespuestaGPT(prompt);
            } else {
              respuestaBot = `Ese d√≠a me preguntaste:\n- ` + preguntas.join('\n- ');
            }
          }
          guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
          return respuestaBot;
        }
        // 0. Preguntas directas sobre electivos
        if (/cu[a√°]ntos?\s+cursos?\s+electivos?\s+(hay|existen|tiene)/i.test(mensaje)) {
          respuestaBot = 'En la malla curricular existen 3 cursos electivos, uno en cada semestre del 5¬∫, 6¬∫ y 7¬∫. En la pr√°ctica, estos electivos son asignados por la facultad.';
        } else if (/en\s+qu[e√©]\s+semestres?\s+(se\s+llevan|se\s+dictan|son)\s+los?\s+electivos?/i.test(mensaje)) {
          respuestaBot = 'Los cursos electivos se llevan en los semestres 5, 6 y 7.';
        } else if (/qu[e√©]\s+cursos?\s+debo\s+(haber\s+aprobado|aprobar)\s+para\s+llev(ar|ar\s+el|ar\s+la)\s+(.+?)(\?|$)/i.test(mensaje)) {
          // 0.5 Pregunta de prerrequisitos de un curso
          const matchPre = mensaje.match(/qu[e√©]\s+cursos?\s+debo\s+(haber\s+aprobado|aprobar)\s+para\s+llev(ar|ar\s+el|ar\s+la)\s+(.+?)(\?|$)/i);
          const nombreCurso = matchPre[3].trim();
          const curso = buscarCursoPorNombreAproximado(nombreCurso);
          if (curso) {
            if (curso.requisitos && curso.requisitos.length > 0) {
              // Convertir n√∫meros a nombres
              const cursosReq = curso.requisitos.map(num => {
                // Buscar el curso por n√∫mero exacto
                const cursos = require('../db/malla_curricular/CursosPorSemestre.json').semestres.flatMap(s => s.cursos);
                const c = cursos.find(cursoItem => cursoItem.numero === num);
                return c ? `${c.numero}: ${c.nombre}` : num;
              });
              respuestaBot = `Para llevar "${curso.nombre}" debes haber aprobado los siguientes cursos:\n${cursosReq.join('\n')}`;
            } else {
              respuestaBot = `El curso "${curso.nombre}" no tiene prerrequisitos.`;
            }
          } else {
            respuestaBot = `No se encontr√≥ informaci√≥n sobre el curso solicitado.`;
          }
        } else if (/qu[e√©]\s+pasa\s+si\s+no\s+apruebo\s+(.+?)(\?|$)/i.test(mensaje) || /qu[e√©]\s+sucede\s+si\s+jalo\s+(.+?)(\?|$)/i.test(mensaje)) {
          // Nueva: Consecuencias de no aprobar un curso
          const matchNoAprueba = mensaje.match(/qu[e√©]\s+pasa\s+si\s+no\s+apruebo\s+(.+?)(\?|$)/i) || mensaje.match(/qu[e√©]\s+sucede\s+si\s+jalo\s+(.+?)(\?|$)/i);
          const nombreCurso = (matchNoAprueba[1] || matchNoAprueba[3] || '').trim();
          const dependientes = buscarCursosDependientes(nombreCurso);
          if (dependientes.length > 0) {
            respuestaBot = `Si no apruebas "${nombreCurso}", no podr√°s llevar los siguientes cursos que dependen de √©l:\n${dependientes.join('\n')}`;
          } else {
            respuestaBot = `Si no apruebas "${nombreCurso}", no hay cursos que dependan directamente de √©l.`;
          }
        } else {
          // --- INICIO INTEGRACI√ìN MATERIALES DE CURSO ---
          // Detectar si la pregunta menciona semana o p√°gina
          let semanaFiltro = null;
          let paginaFiltro = null;
          const matchSemana = mensaje.match(/semana[_\s-]*(\d{1,2})/i);
          if (matchSemana) {
            semanaFiltro = `semana_${matchSemana[1].padStart(2, '0')}`;
          }
          const matchPagina = mensaje.match(/p[a√°]gina[_\s-]*(\d{1,3})/i);
          if (matchPagina) {
            paginaFiltro = parseInt(matchPagina[1]);
          }
          // Buscar en todos los materiales embebidos
          let fragmentosMaterial = await buscarFragmentosRelevantes(mensaje, undefined, 10); // Traer m√°s para filtrar
          // Filtrar por semana si corresponde
          if (semanaFiltro) {
            fragmentosMaterial = fragmentosMaterial.filter(f => f.semana === semanaFiltro);
          }
          // Filtrar por p√°gina si corresponde
          if (paginaFiltro) {
            fragmentosMaterial = fragmentosMaterial.filter(f => String(f.pagina) === String(paginaFiltro));
          }
          // Calcular similitud y tomar los top 3
          fragmentosMaterial.sort((a, b) => b.similitud - a.similitud);
          const fragmentosMaterialFiltrados = fragmentosMaterial.slice(0, 3).filter(f => f.similitud >= 0.25);

          // --- MEJORA: Si la pregunta es tipo '¬øQu√© tema se ve en la semana X?' y hay fragmentos de esa semana, mostrar el contenido aunque la similitud sea baja ---
          const regexPreguntaSemana = /qu[e√©]?\s*(temas?|contenido|se ve|se estudia|se aprende|se revisa|se aborda|se trata|se cubre|se dicta|se imparte|se desarrolla|se explica|se realiza|se hace|se trabaja|se expone|se presenta|se analiza|se discute|se investiga|se observa|se eval[√∫u]a|se repasa|se revisa|se ve)\s+en\s+la\s+semana[_\s-]?(\d{1,2})/i;
          if (semanaFiltro && regexPreguntaSemana.test(mensaje) && fragmentosMaterial.length > 0) {
            // Mostrar el contenido de los fragmentos de esa semana (puedes ajustar para mostrar todos o solo el primero)
            const respuestaSemana = fragmentosMaterial.slice(0, 2).map(f => f.texto || f.text || f.contenido || '').join('\n\n');
            respuestaBot = respuestaSemana || 'No tengo informaci√≥n espec√≠fica sobre esa semana.';
            // Guardar en historial el contexto de los fragmentos usados
            guardarEnHistorial(numeroLimpio, {
              respuesta: respuestaBot,
              contexto_fragmentos: fragmentosMaterial.slice(0, 2)
            }, 'bot');
            return respuestaBot;
          }
          // Si el usuario pide expl√≠citamente la imagen/slide o el PDF
          if (fragmentosMaterialFiltrados.length > 0 && /(slide|imagen|image|img|png|foto|picture|pic|pdf|archivo)/i.test(mensaje)) {
            // --- INICIO MEJORA: buscar fragmento con imagen y keyword ---
            // 1. Extraer keyword principal de la pregunta
            function extraerKeyword(pregunta) {
              // Busca despu√©s de 'de', 'del', 'sobre', o la √∫ltima palabra relevante
              const match = pregunta.match(/(?:de|del|sobre)\s+([\w√°√©√≠√≥√∫√±]+)/i);
              if (match) return match[1].toLowerCase();
              // Si no, toma la √∫ltima palabra relevante (no stopword)
              const palabras = pregunta.split(/\s+/).filter(w => w.length > 2 && !['una','las','los','que','con','por','del','una','sus','sus','las','los','una','por','del','las','los','una','para','este','esta','ese','esa','aqui','alli','cual','cuales','como','donde','cuando','quien','quienes','cual','cuales','cual','cuales','sobre','slide','imagen','foto','pdf','archivo','mostrar','mu√©strame','muestrame','dame','quiero','ver','la','el','un','una','de','en','y','o','es','al','lo','un','una','me','mi','tu','su','te','le','nos','os','se','si','ya','no','s√≠','si','pero','mas','m√°s','menos','muy','tan','tanto','poco','mucho','muchos','muchas','pocos','pocas','todo','toda','todos','todas','ningun','ninguna','ninguno','ningunos','ningunas','algun','alguna','alguno','algunos','algunas','este','esta','estos','estas','ese','esa','esos','esas','aquel','aquella','aquellos','aquellas','cual','cuales','quien','quienes','cuyo','cuya','cuyos','cuyas','donde','cuando','como','cuanto','cuanta','cuantos','cuantas','que','quien','cual','cuales','donde','cuando','como','cuanto','cuanta','cuantos','cuantas']);
              return palabras.length > 0 ? palabras[palabras.length-1].toLowerCase() : '';
            }
            const keyword = extraerKeyword(mensaje);
            // Buscar fragmento con imagen y keyword
            let f = fragmentosMaterialFiltrados.find(frag => frag.imagen && frag.imagen.trim() && keyword && (frag.texto || '').toLowerCase().includes(keyword));
            // Si no encuentra, buscar cualquier fragmento con imagen
            if (!f) {
              f = fragmentosMaterialFiltrados.find(frag => frag.imagen && frag.imagen.trim());
            }
            // Si a√∫n no, fallback al primero
            if (!f) {
              f = fragmentosMaterialFiltrados[0];
            }
            // Si el fragmento no tiene imagen, busca otro de la misma p√°gina que s√≠ la tenga
            if ((!f.imagen || !f.imagen.trim()) && f.pagina) {
              const alternativo = fragmentosMaterialFiltrados.find(frag => frag.pagina === f.pagina && frag.imagen && frag.imagen.trim());
              if (alternativo) f = alternativo;
            }
            // Si pide imagen/slide
            if (/(slide|imagen|image|img|png|foto|picture|pic)/i.test(mensaje)) {
              // 1. Responde primero con la respuesta textual (GPT o fragmento)
              respuestaBot = fragmentosMaterialFiltrados[0].texto;
              await client.sendMessage(numero, respuestaBot + `\n(Fuente: ${f.archivo}, p. ${f.pagina})`);
              // 2. Luego intenta enviar la imagen
              const rutaAbsoluta = path.join(
                __dirname,
                '../db/materiales_curso',
                f.imagen.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
              );
              console.log('DEBUG rutaAbsoluta imagen:', rutaAbsoluta, fs.existsSync(rutaAbsoluta));
              if (fs.existsSync(rutaAbsoluta)) {
                const media = MessageMedia.fromFilePath(rutaAbsoluta);
                await client.sendMessage(numero, media, { caption: 'Aqu√≠ tienes la imagen de la p√°gina.' });
                respuestaBot = null; // Ya se envi√≥ todo
              } else {
                respuestaBot = 'No se encontr√≥ la imagen solicitada.';
              }
              guardarEnHistorial(numeroLimpio, {
                respuesta: respuestaBot,
                contexto_fragmentos: fragmentosMaterialFiltrados.slice(0, 3).map(f => ({
                  archivo: f.archivo,
                  pagina: f.pagina,
                  cita: f.cita,
                  texto: (f.texto || f.text || f.contenido || '').slice(0, 120)
                }))
              }, 'bot');
              return respuestaBot;
            }
            // Si pide PDF
            if (/(pdf|archivo)/i.test(mensaje)) {
              // Buscar fragmento con PDF y keyword
              let fpdf = fragmentosMaterialFiltrados.find(frag => frag.ruta_pdf && frag.ruta_pdf.trim() && keyword && (frag.texto || '').toLowerCase().includes(keyword));
              if (!fpdf) {
                fpdf = fragmentosMaterialFiltrados.find(frag => frag.ruta_pdf && frag.ruta_pdf.trim());
              }
              if (!fpdf) {
                fpdf = fragmentosMaterialFiltrados[0];
              }
              // 1. Responde primero con la respuesta textual (GPT o fragmento)
              respuestaBot = fragmentosMaterialFiltrados[0].texto;
              await client.sendMessage(numero, respuestaBot + `\n(Fuente: ${fpdf.archivo}, p. ${fpdf.pagina})`);
              // 2. Luego intenta enviar el PDF como archivo adjunto
              const rutaAbsolutaPDF = path.join(
                __dirname,
                '../db/materiales_curso',
                fpdf.ruta_pdf.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
              );
              console.log('DEBUG rutaAbsoluta PDF:', rutaAbsolutaPDF, fs.existsSync(rutaAbsolutaPDF));
              if (fs.existsSync(rutaAbsolutaPDF)) {
                const mediaPDF = MessageMedia.fromFilePath(rutaAbsolutaPDF);
                await client.sendMessage(numero, mediaPDF, { caption: 'Aqu√≠ tienes el archivo PDF solicitado.' });
                respuestaBot = null;
              } else {
                respuestaBot = `No se encontr√≥ el archivo PDF solicitado (${fpdf.ruta_pdf}).`;
              }
              guardarEnHistorial(numeroLimpio, {
                respuesta: respuestaBot,
                contexto_fragmentos: fragmentosMaterialFiltrados.slice(0, 3).map(f => ({
                  archivo: f.archivo,
                  pagina: f.pagina,
                  cita: f.cita,
                  texto: (f.texto || f.text || f.contenido || '').slice(0, 120)
                }))
              }, 'bot');
              return respuestaBot;
            }
          }
          // Si hay fragmentos relevantes pero NO es petici√≥n de imagen/pdf, responde con el texto y guarda contexto
          if (fragmentosMaterialFiltrados.length > 0 && !/(slide|imagen|image|img|png|foto|picture|pic|pdf|archivo)/i.test(mensaje)) {
            // Construir contexto para GPT
            const contexto = fragmentosMaterialFiltrados.map(f => f.texto || f.text || f.contenido || '').join('\n').trim();
            // Prompt para GPT: respuesta natural, breve y clara SOLO usando el contexto
            const prompt = `Responde de forma clara, breve y natural usando SOLO la siguiente informaci√≥n interna. Si la respuesta no est√° en el contexto, responde: \"No tengo informaci√≥n sobre eso\".\n\nContexto:\n${contexto}\n\nPregunta: ${mensaje}`;
            respuestaBot = await obtenerRespuestaGPT(prompt);
            // Guardar el parafraseo y los fragmentos originales completos
            guardarEnHistorial(numeroLimpio, {
              respuesta: respuestaBot,
              contexto_fragmentos: fragmentosMaterialFiltrados.slice(0, 3) // Guardar fragmentos completos
            }, 'bot');
            return respuestaBot;
          }
          // --- FIN INTEGRACI√ìN MATERIALES DE CURSO ---
          // --- INICIO FLUJO INTERACTIVO DE FUENTE BASADO EN HISTORIAL ---
          // 1. Si el usuario responde 'imagen', 'pdf' o 'no' tras una cita, procesar aqu√≠
          const historial = leerHistorialUsuario(numeroLimpio).slice().reverse();
          const ultimaBotConCita = historial.find(h => h.tipo === 'bot' && h.mensaje && typeof h.mensaje === 'object' && h.mensaje.respuesta && h.mensaje.contexto_fragmentos && h.mensaje.cita_interactiva);
          if (ultimaBotConCita) {
            const contexto = ultimaBotConCita.mensaje.contexto_fragmentos;
            const cita = ultimaBotConCita.mensaje.cita_interactiva;
            const respuestaUsuario = mensaje.trim().toLowerCase();
            // Funci√≥n auxiliar para buscar en todos los embeddings si no est√° en el contexto
            async function buscarFragmentoEnEmbeddings(archivo, pagina) {
              try {
                // Buscar en todos los archivos de embeddings de materiales
                const fsPromises = require('fs').promises;
                const embeddingsDir = path.join(__dirname, '../db/embeddings');
                console.log('DEBUG: embeddingsDir path:', embeddingsDir);
                const files = await fsPromises.readdir(embeddingsDir);
                console.log('DEBUG: Archivos en embeddingsDir:', files);
                for (const file of files) {
                  if (file.startsWith('embeddings_material_') && file.endsWith('.json')) {
                    const fullPath = path.join(embeddingsDir, file);
                    try {
                      const data = JSON.parse(await fsPromises.readFile(fullPath, 'utf8'));
                      // Puede ser array o {data: array}
                      const arr = Array.isArray(data) ? data : (Array.isArray(data.data) ? data.data : []);
                      console.log('DEBUG: Leyendo embeddings de', file, 'con', arr.length, 'fragmentos');
                      const frag = arr.find(f => f.archivo === archivo && String(f.pagina) === String(pagina));
                      if (frag) {
                        console.log('DEBUG: ¬°Fragmento encontrado!', frag);
                        return frag;
                      }
                    } catch (e) { console.log('DEBUG: Error leyendo', fullPath, e); }
                  }
                }
                return null;
              } catch (e) {
                console.log('DEBUG: Error global en buscarFragmentoEnEmbeddings', e);
                return null;
              }
            }
            if (["imagen", "pdf", "no"].includes(respuestaUsuario)) {
              console.log('DEBUG: Entrando a b√∫squeda de imagen/pdf para cita', cita);
              if (respuestaUsuario === "no") {
                respuestaBot = 'Entendido, no enviar√© ning√∫n archivo. Si tienes otra consulta, dime.';
                guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
                return respuestaBot;
              }
              // Buscar el fragmento exacto en el contexto
              let fragmentoExacto = contexto.find(f => f.archivo === cita.archivo && String(f.pagina) === String(cita.pagina));
              // Si no est√° en el contexto, buscar en todos los embeddings
              if (!fragmentoExacto) {
                fragmentoExacto = await buscarFragmentoEnEmbeddings(cita.archivo, cita.pagina);
                if (!fragmentoExacto) {
                  console.log('DEBUG: No se encontr√≥ fragmento exacto para', cita);
                }
              }
              if (respuestaUsuario === "imagen") {
                if (fragmentoExacto && fragmentoExacto.imagen && fragmentoExacto.imagen.trim()) {
                  const rutaAbsoluta = path.join(
                    __dirname,
                    '../db/materiales_curso',
                    fragmentoExacto.imagen.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
                  );
                  console.log('DEBUG rutaAbsoluta:', rutaAbsoluta, fs.existsSync(rutaAbsoluta));
                  if (fs.existsSync(rutaAbsoluta)) {
                    const media = MessageMedia.fromFilePath(rutaAbsoluta);
                    await client.sendMessage(numero, media, { caption: `Imagen de la p√°gina solicitada.\nArchivo: ${cita.archivo}\nP√°gina: ${cita.pagina}` });
                    respuestaBot = null;
                  } else {
                    respuestaBot = 'No se encontr√≥ la imagen exacta para esa p√°gina en el material mostrado.';
                  }
                } else {
                  respuestaBot = 'No se encontr√≥ la imagen exacta para esa p√°gina en el material mostrado.';
                }
                guardarEnHistorial(numeroLimpio, respuestaBot || 'Enviada imagen exacta', 'bot');
                return respuestaBot;
              } else if (respuestaUsuario === "pdf") {
                if (fragmentoExacto && fragmentoExacto.ruta_pdf && fragmentoExacto.ruta_pdf.trim()) {
                  const rutaAbsolutaPDF = path.join(
                    __dirname,
                    '../db/materiales_curso',
                    fragmentoExacto.ruta_pdf.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
                  );
                  console.log('DEBUG rutaAbsolutaPDF:', rutaAbsolutaPDF, fs.existsSync(rutaAbsolutaPDF));
                  if (fs.existsSync(rutaAbsolutaPDF)) {
                    const mediaPDF = MessageMedia.fromFilePath(rutaAbsolutaPDF);
                    await client.sendMessage(numero, mediaPDF, { caption: `PDF de la p√°gina solicitada.\nArchivo: ${cita.archivo}\nP√°gina: ${cita.pagina}` });
                    respuestaBot = null;
                  } else {
                    respuestaBot = 'No se encontr√≥ el PDF exacto para esa p√°gina en el material mostrado.';
                  }
                } else {
                  respuestaBot = 'No se encontr√≥ el PDF exacto para esa p√°gina en el material mostrado.';
                }
                guardarEnHistorial(numeroLimpio, respuestaBot || 'Enviado PDF exacto', 'bot');
                return respuestaBot;
              }
            } else if (["s√≠", "si", "s", "ok", "dale", "claro", "por favor", "env√≠amelo", "env√≠ame", "enviame", "porfa", "hazlo", "por supuesto", "vale", "yes", "please", "manda", "manda el pdf", "env√≠a el pdf", "enviame el pdf", "env√≠ame el pdf", "quiero el pdf", "quiero el archivo", "quiero el documento", "m√°ndalo", "manda el archivo", "manda el documento", "de acuerdo", "est√° bien", "esta bien", "va", "hazlo"].includes(respuestaUsuario)) {
              respuestaBot = 'Por favor responde "imagen", "pdf" o "no".';
              guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
              return respuestaBot;
            }
          }
          // --- FIN FLUJO INTERACTIVO DE FUENTE BASADO EN HISTORIAL ---
          // --- INICIO FLUJO DE FUENTE SIMPLIFICADO ---
          const regexFuente = /(fuente|archivo fuente|de d√≥nde sacaste|de donde sacaste|de d√≥nde proviene|de donde proviene|de d√≥nde obtuviste|de donde obtuviste|cita|origen|me puedes dar el archivo|dame el archivo|mu√©strame la fuente|muestrame la fuente|de qu√© archivo|de que archivo|de qu√© material|de que material|de qu√© documento|de que documento)/i;
          if (regexFuente.test(mensaje)) {
            // Buscar en el historial la √∫ltima respuesta del bot antes de la petici√≥n de fuente
            const historial = leerHistorialUsuario(numeroLimpio);
            let idx = historial.length - 1;
            // Buscar hacia atr√°s hasta encontrar el mensaje actual del usuario
            while (idx >= 0 && !(historial[idx].tipo === 'usuario' && historial[idx].mensaje === mensaje)) {
              idx--;
            }
            // Buscar la √∫ltima respuesta del bot antes de la petici√≥n de fuente
            idx--;
            let fragmentosContexto = null;
            while (idx >= 0) {
              if (historial[idx].tipo === 'bot') {
                if (historial[idx].mensaje && typeof historial[idx].mensaje === 'object' && Array.isArray(historial[idx].mensaje.contexto_fragmentos)) {
                  fragmentosContexto = historial[idx].mensaje.contexto_fragmentos;
                  break;
                }
              }
              idx--;
            }
            // Si no se encuentra, usar el mensaje del usuario como fallback
            let fragmentos = null;
            if (fragmentosContexto && fragmentosContexto.length > 0) {
              fragmentos = fragmentosContexto;
            } else {
              // Fallback: buscar por el texto del usuario
              fragmentos = await buscarFragmentosRelevantes(mensaje, undefined, 5);
            }
            const fragmento = fragmentos.find(f => f.archivo && f.pagina);
            // --- INICIO MEJORA: Si el usuario pide expl√≠citamente el PDF/archivo, enviar PDF directo si existe ---
            const regexFuentePDF = /(pdf|archivo|documento|el pdf|el archivo|el documento)/i;
            if (fragmento) {
              if (regexFuentePDF.test(mensaje)) {
                // El usuario pidi√≥ expl√≠citamente el PDF/archivo
                if (fragmento.ruta_pdf && fragmento.ruta_pdf.trim()) {
                  const rutaAbsolutaPDF = path.join(
                    __dirname,
                    '../db/materiales_curso',
                    fragmento.ruta_pdf.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
                  );
                  if (fs.existsSync(rutaAbsolutaPDF)) {
                    const mediaPDF = MessageMedia.fromFilePath(rutaAbsolutaPDF);
                    await client.sendMessage(numero, mediaPDF, { caption: `PDF de la p√°gina solicitada.\nArchivo: ${fragmento.archivo}\nP√°gina: ${fragmento.pagina}` });
                    respuestaBot = null;
                    guardarEnHistorial(numeroLimpio, `Enviado PDF fuente\nFuente: ${fragmento.archivo}, p. ${fragmento.pagina}`, 'bot');
                    return respuestaBot;
                  } else {
                    respuestaBot = 'No se encontr√≥ el archivo PDF exacto de la fuente. La respuesta fue parafraseada o compuesta a partir de varios fragmentos y no se puede dar una fuente exacta.';
                    guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
                    return respuestaBot;
                  }
                } else {
                  respuestaBot = 'No se encontr√≥ el archivo PDF exacto de la fuente. La respuesta fue parafraseada o compuesta a partir de varios fragmentos y no se puede dar una fuente exacta.';
                  guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
                  return respuestaBot;
                }
              }
              // --- FIN MEJORA PDF directo ---
              // Si tiene imagen, env√≠a la imagen y la cita
              if (fragmento.imagen && fragmento.imagen.trim()) {
                const rutaAbsoluta = path.join(
                  __dirname,
                  '../db/materiales_curso',
                  fragmento.imagen.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
                );
                if (fs.existsSync(rutaAbsoluta)) {
                  const media = MessageMedia.fromFilePath(rutaAbsoluta);
                  await client.sendMessage(numero, media, { caption: `Fuente: ${fragmento.archivo}, p. ${fragmento.pagina}` });
                  respuestaBot = null;
                  guardarEnHistorial(numeroLimpio, `Enviada imagen fuente\nFuente: ${fragmento.archivo}, p. ${fragmento.pagina}`, 'bot');
                  return respuestaBot;
                }
              }
              // Si no hay imagen pero hay PDF, pregunta si desea el PDF
              if (fragmento.ruta_pdf && fragmento.ruta_pdf.trim()) {
                respuestaBot = `No se encontr√≥ la imagen exacta, ¬ødeseas que te env√≠e el archivo PDF completo de donde proviene la informaci√≥n? Responde 's√≠' o 'no'.\n\nFuente: ${fragmento.archivo}, p. ${fragmento.pagina}`;
                // Guardar en historial que se est√° esperando confirmaci√≥n para PDF
                guardarEnHistorial(numeroLimpio, { respuesta: respuestaBot, contexto_fragmentos: [fragmento], cita_interactiva: { archivo: fragmento.archivo, pagina: fragmento.pagina }, esperando_pdf: true }, 'bot');
                return respuestaBot;
              }
              // Si no hay ni imagen ni PDF, responde que es parafraseo
              respuestaBot = 'La respuesta fue parafraseada a partir de varios fragmentos y no se puede dar una fuente exacta.';
              guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
              return respuestaBot;
            } else {
              respuestaBot = 'No se pudo identificar la fuente exacta de la informaci√≥n.';
              guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
              return respuestaBot;
            }
          }
          // --- FLUJO DE CONFIRMACI√ìN DE PDF ---
          const historialPDF = leerHistorialUsuario(numeroLimpio).slice().reverse();
          const ultimaBotEsperandoPDF = historialPDF.find(h => h.tipo === 'bot' && h.mensaje && typeof h.mensaje === 'object' && h.mensaje.esperando_pdf);
          if (ultimaBotEsperandoPDF) {
            const contexto = ultimaBotEsperandoPDF.mensaje.contexto_fragmentos;
            const cita = ultimaBotEsperandoPDF.mensaje.cita_interactiva;
            const respuestaUsuario = mensaje.trim().toLowerCase();
            if (["s√≠", "si", "s", "ok", "dale", "claro", "por favor", "env√≠amelo", "env√≠ame", "enviame", "porfa", "hazlo", "por supuesto", "vale", "yes", "please", "manda", "manda el pdf", "env√≠a el pdf", "enviame el pdf", "env√≠ame el pdf", "quiero el pdf", "quiero el archivo", "quiero el documento", "m√°ndalo", "manda el archivo", "manda el documento", "de acuerdo", "est√° bien", "esta bien", "va", "hazlo"].includes(respuestaUsuario)) {
              // Buscar el fragmento exacto en el contexto
              const fragmentoExacto = contexto.find(f => f.archivo === cita.archivo && String(f.pagina) === String(cita.pagina));
              if (fragmentoExacto && fragmentoExacto.ruta_pdf && fragmentoExacto.ruta_pdf.trim()) {
                const rutaAbsolutaPDF = path.join(
                  __dirname,
                  '../db/materiales_curso',
                  fragmentoExacto.ruta_pdf.replace(/\\/g, '/').replace(/^procesados[\\/]/, 'procesados/')
                );
                if (fs.existsSync(rutaAbsolutaPDF)) {
                  const mediaPDF = MessageMedia.fromFilePath(rutaAbsolutaPDF);
                  await client.sendMessage(numero, mediaPDF, { caption: `PDF de la p√°gina solicitada.\nArchivo: ${cita.archivo}\nP√°gina: ${cita.pagina}` });
                  respuestaBot = null;
                  guardarEnHistorial(numeroLimpio, 'Enviado PDF exacto', 'bot');
                  return respuestaBot;
                } else {
                  respuestaBot = 'No se encontr√≥ el PDF exacto para esa p√°gina en el material mostrado.';
                  guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
                  return respuestaBot;
                }
              } else {
                respuestaBot = 'No se encontr√≥ el PDF exacto para esa p√°gina en el material mostrado.';
                guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
                return respuestaBot;
              }
            } else if (["no", "no gracias", "no quiero", "no deseo", "no por ahora", "gracias"].includes(respuestaUsuario)) {
              respuestaBot = 'Entendido, no enviar√© el archivo. Si tienes otra consulta, dime.';
              guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
              return respuestaBot;
            } else {
              respuestaBot = 'Por favor responde "s√≠" o "no" para saber si deseas el PDF.';
              guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
              return respuestaBot;
            }
          }
          // --- FIN FLUJO DE FUENTE SIMPLIFICADO ---
          // 1. Preguntas generales sobre la malla curricular
          const respuestaGeneral = responderPreguntaGeneralMalla(mensaje);
          if (respuestaGeneral) {
            respuestaBot = respuestaGeneral;
          } else {
            // 2. Preguntas de relaci√≥n/requisito (¬øQu√© cursos requieren X? ¬øQu√© cursos tienen como requisito X? ¬øQu√© cursos se pueden llevar despu√©s de X?)
            const patronRequieren = /qu√©\s+cursos?\s+(requieren|tienen\s+como\s+requisito|se\s+pueden\s+llevar\s+despu√©s\s+de)\s+(?:haber\s+aprobado\s+)?(.+?)(\?|$)/i;
            const matchRel = mensaje.match(patronRequieren);
            if (matchRel) {
              const nombreCurso = matchRel[2].trim();
              const cursosRelacionados = buscarCursosQueTienenComoRequisito(nombreCurso);
              if (cursosRelacionados.length > 0) {
                respuestaBot = `Los cursos que requieren "${nombreCurso}" como requisito son:\n${cursosRelacionados.join('\n')}`;
              } else {
                respuestaBot = `Ning√∫n curso requiere "${nombreCurso}" como requisito.`;
              }
            } else {
              // 3. Dependencias inversas: ¬øQu√© cursos dependen de X?
              const patronDependen = /qu√©\s+cursos?\s+dependen\s+de\s+(.+?)(\?|$)/i;
              const matchDep = mensaje.match(patronDependen);
              if (matchDep) {
                const nombreCurso = matchDep[1].trim();
                const dependientes = buscarCursosDependientes(nombreCurso);
                if (dependientes.length > 0) {
                  respuestaBot = `Los cursos que dependen de "${nombreCurso}" son:\n${dependientes.join('\n')}`;
                } else {
                  respuestaBot = `Ning√∫n curso depende de "${nombreCurso}".`;
                }
              } else {
                // 4. Inicio de malla: ¬øQu√© cursos son el inicio de la malla?
                if (/inicio\s+de\s+la\s+malla|cursos?\s+del\s+primer\s+semestre/i.test(mensaje)) {
                  const inicio = cursosInicioMalla();
                  respuestaBot = `Los cursos del primer semestre (inicio de la malla) son:\n${inicio.join('\n')}`;
                } else if (/cursos?\s+con\s+m[a√°]s\s+prerrequisitos?/i.test(mensaje)) {
                  // 5. Cursos con m√°s prerrequisitos
                  const top = cursosConMasPrerrequisitos();
                  respuestaBot = `Los cursos con m√°s prerrequisitos en la malla son:\n${top.join('\n')}`;
                } else if (/ingenier[√≠i]a\s+de\s+sistemas?\s+de?\s+informaci[o√≥]n/i.test(mensaje) && 
                           !/(docente|profesor|maestro|instructor|horario|horarios|hora|horas|d√≠a|d√≠as|aula|aulas|sal√≥n|salones|teor√≠a|pr√°ctica|laboratorio|sesi√≥n|sesiones|piso|pisos|inicio|fin|termina|empieza|ciclo|c√≥digo|codigo|semestre|secci√≥n|seccion)/i.test(mensaje)) {
                  // 6. Priorizar detalles para Ingenier√≠a de Sistemas de Informaci√≥n (solo si NO es pregunta sobre horarios)
                  const curso = buscarCursoPorNombreAproximado('Ingenier√≠a de Sistemas de Informaci√≥n');
                  if (curso) {
                    let detalles = `Curso ${curso.numero}: ${curso.nombre}\nSemestre: ${curso.semestre}\nCr√©ditos: ${curso.creditos}\nTipo: ${curso.tipo}`;
                    if (curso.requisitos && curso.requisitos.length > 0) {
                      detalles += `\nPrerrequisitos: ${curso.requisitos.join(', ')}`;
                    } else {
                      detalles += `\nNo tiene prerrequisitos.`;
                    }
                    const dependientes = buscarCursosDependientes('Ingenier√≠a de Sistemas de Informaci√≥n');
                    if (dependientes.length > 0) {
                      detalles += `\nCursos que dependen de este curso:\n${dependientes.join('\n')}`;
                    }
                    respuestaBot = detalles;
                  } else {
                    respuestaBot = 'No se encontr√≥ informaci√≥n detallada sobre el curso Ingenier√≠a de Sistemas de Informaci√≥n.';
                  }
                } else {
                  // 7. Consultas de unidad y b√∫squeda sem√°ntica tradicional
                  const infoUnidad = buscarInformacionUnidad(mensaje);
                  if (infoUnidad) {
                    if (infoUnidad.error) {
                      respuestaBot = `‚ùå ${infoUnidad.error}. El curso tiene 4 unidades (1-4). ¬øPodr√≠as consultar sobre una unidad v√°lida?`;
                      console.log(`‚ùå Unidad no encontrada: ${infoUnidad.error}`);
                    } else if (infoUnidad.tipo === 'unidad') {
                      const unidad = infoUnidad.unidad;
                      const temas = unidad.semanas.map(semana => ({
                        semana: semana.semana,
                        contenido_tematico: semana.contenido_tematico,
                        sesiones: semana.sesiones,
                        evidencia: semana.evidencia
                      }));
                      respuestaBot = `üìö **Unidad ${infoUnidad.numeroUnidad}: ${unidad.titulo}**\n\n` +
                                    `üéØ **Logro de aprendizaje:** ${unidad.logro_aprendizaje}\n\n` +
                                    `üìÖ **Temas por semana:**\n\n` +
                                    temas.map(t => 
                                      `**Semana ${t.semana}:** ${t.contenido_tematico}\n` +
                                      `‚Ä¢ Sesiones: ${Array.isArray(t.sesiones) ? t.sesiones.join(', ') : t.sesiones || 'No especificadas'}\n` +
                                      `‚Ä¢ Evidencia: ${t.evidencia || 'No especificada'}`
                                    ).join('\n\n');
                      console.log(`‚úÖ Respuesta directa para unidad ${infoUnidad.numeroUnidad}`);
                    }
                  } else {
                    // B√∫squeda sem√°ntica tradicional
                    const fragmentos = await buscarFragmentosRelevantes(mensaje, undefined, 5);
                    console.log('üîç Fragmentos encontrados:', fragmentos.length);
                    console.log('ÔøΩÔøΩ Fragmentos y similitud:', fragmentos.map(f => ({ 
                      id: f.id || 'sin_id',
                      texto: (f.text || f.texto || f.contenido || 'Sin texto').slice(0, 80), 
                      similitud: f.similitud,
                      fuente: f.fuente || 'sin_fuente'
                    })));
                    const fragmentosFiltrados = fragmentos.filter(f => f.similitud >= UMBRAL_SIMILITUD);
                    console.log('‚úÖ Fragmentos que superan umbral:', fragmentosFiltrados.length);
                    
                    // Verificar si hay fragmentos de horarios con similitud aceptable
                    const fragmentosHorarios = fragmentosFiltrados.filter(f => f.fuente === 'HorariosCursos.json' && f.similitud > 0.3);
                    
                    if (fragmentosHorarios.length > 0) {
                      // Para preguntas espec√≠ficas sobre datos del curso, priorizar el fragmento general
                      let fragmentoHorarios;
                      if (/ciclo|c√≥digo|codigo|semestre|secci√≥n|seccion/i.test(mensaje)) {
                        // Buscar el fragmento general que contiene toda la informaci√≥n del curso
                        fragmentoHorarios = fragmentosHorarios.find(f => f.id === 'horarios_curso_sistemas_general');
                        if (!fragmentoHorarios) {
                          fragmentoHorarios = fragmentosHorarios[0]; // Fallback al m√°s relevante
                        }
                      } else {
                        fragmentoHorarios = fragmentosHorarios[0]; // Tomar el m√°s relevante para otras preguntas
                      }
                      
                      const contenido = fragmentoHorarios.contenido || fragmentoHorarios.texto || fragmentoHorarios.text;
                      
                      // Crear un prompt m√°s espec√≠fico basado en el tipo de pregunta
                      let prompt;
                      if (/ciclo/i.test(mensaje)) {
                        prompt = `Extrae SOLO el n√∫mero del ciclo de esta informaci√≥n y responde de forma directa.

Informaci√≥n:
${contenido}

Pregunta: ${mensaje}

Responde solo con el n√∫mero del ciclo (ej: "VII" o "7").`;
                      } else if (/c√≥digo|codigo/i.test(mensaje)) {
                        prompt = `Extrae SOLO el c√≥digo del curso de esta informaci√≥n y responde de forma directa.

Informaci√≥n:
${contenido}

Pregunta: ${mensaje}

Responde solo con el c√≥digo del curso.`;
                      } else if (/semestre/i.test(mensaje)) {
                        prompt = `Extrae el semestre acad√©mico de esta informaci√≥n y responde de forma clara pero concisa.

Informaci√≥n:
${contenido}

Pregunta: ${mensaje}

Responde con "Semestre acad√©mico: [valor]" (ej: "Semestre acad√©mico: 2025-I").`;
                      } else if (/secci√≥n|seccion/i.test(mensaje)) {
                        prompt = `Extrae SOLO la secci√≥n del curso de esta informaci√≥n y responde de forma directa.

Informaci√≥n:
${contenido}

Pregunta: ${mensaje}

Responde solo con la secci√≥n (ej: "B").`;
                      } else {
                        prompt = `Responde de forma directa y natural usando SOLO esta informaci√≥n. S√© breve y directo, sin ser muy formal.

Informaci√≥n:
${contenido}

Pregunta: ${mensaje}

Responde de manera simple y directa.`;
                      }
                      
                      respuestaBot = await obtenerRespuestaGPT(prompt);
                      // Guardar los fragmentos top usados como contexto junto con la respuesta
                      // Para esto, guardamos en el historial un objeto especial
                      guardarEnHistorial(numeroLimpio, {
                        respuesta: respuestaBot,
                        contexto_fragmentos: fragmentosFiltrados.slice(0, 3).map(f => ({
                          archivo: f.archivo,
                          pagina: f.pagina,
                          cita: f.cita,
                          texto: (f.texto || f.text || f.contenido || '').slice(0, 120)
                        }))
                      }, 'bot');
                      return respuestaBot;
                    } else {
                      // B√∫squeda sem√°ntica tradicional para otros casos
                      const contexto = fragmentosFiltrados.map(f => f.text || f.texto || f.contenido || '').join('\n').trim();
                      if (fragmentosFiltrados.length === 0 || !contexto) {
                        respuestaBot = '‚ùì No tengo informaci√≥n sobre eso en mi base de datos interna.';
                      } else {
                        const prompt = `Responde SOLO usando la siguiente informaci√≥n interna. Si la respuesta no est√° en el contexto, responde: "No tengo informaci√≥n sobre eso".\n\nContexto:\n${contexto}\n\nPregunta: ${mensaje}`;
                        respuestaBot = await obtenerRespuestaGPT(prompt);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('Error al manejar el mensaje:', error);
        respuestaBot = `Lo siento, hubo un error al procesar tu mensaje.`;
      }
    }
  }

  // 5. Guardar la respuesta del bot en el historial
  guardarEnHistorial(numeroLimpio, respuestaBot, 'bot');
  return respuestaBot;
}

module.exports = {
  manejarMensaje,
}; 