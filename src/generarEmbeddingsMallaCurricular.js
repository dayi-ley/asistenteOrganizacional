const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');

// Cargar variables de entorno
require('dotenv').config();

// Configurar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Funci√≥n para generar embeddings
async function generarEmbedding(texto) {
  try {
    const response = await openai.embeddings.create({
      model: "text-embedding-3-small",
      input: texto,
      encoding_format: "float"
    });
    return response.data[0].embedding;
  } catch (error) {
    console.error('Error generando embedding:', error);
    throw error;
  }
}

// Funci√≥n para crear embeddings de la malla curricular
async function generarEmbeddingsMallaCurricular() {
  try {
    console.log('üîÑ Generando embeddings para la malla curricular...');
    
    const embeddings = [];
    
    // 1. Informaci√≥n General de la Malla
    const infoGeneral = JSON.parse(fs.readFileSync(path.join(__dirname, 'db', 'malla_curricular', 'InformacionGeneral.json'), 'utf8'));
    
    const textoInfoGeneral = `Informaci√≥n general de la malla curricular: ${infoGeneral.titulo}, ${infoGeneral.subtitulo}. Duraci√≥n: ${infoGeneral.duracion_en_semestres} semestres, ${infoGeneral.total_asignaturas} asignaturas, ${infoGeneral.total_creditos} cr√©ditos totales. Escuela: ${infoGeneral.escuela_profesional}, Facultad: ${infoGeneral.facultad}, Plan de estudios: ${infoGeneral.plan_estudios}, Estado: ${infoGeneral.estado}.`;
    const embeddingInfoGeneral = await generarEmbedding(textoInfoGeneral);
    embeddings.push({
      texto: textoInfoGeneral,
      embedding: embeddingInfoGeneral,
      tipo: 'malla_info_general'
    });
    
    // 2. Estructura de Cr√©ditos
    const estructuraCreditos = infoGeneral.estructura_creditos;
    const textoEstructura = `Estructura de cr√©ditos de la malla: Formaci√≥n general (${estructuraCreditos.formacion_general}), Formaci√≥n espec√≠fica (${estructuraCreditos.formacion_especifica}), Formaci√≥n electiva (${estructuraCreditos.formacion_electiva}), Pr√°cticas preprofesionales (${estructuraCreditos.practicas_preprofesionales}).`;
    const embeddingEstructura = await generarEmbedding(textoEstructura);
    embeddings.push({
      texto: textoEstructura,
      embedding: embeddingEstructura,
      tipo: 'malla_estructura_creditos'
    });
    
    // 3. Cursos por Semestre
    const cursosPorSemestre = JSON.parse(fs.readFileSync(path.join(__dirname, 'db', 'malla_curricular', 'CursosPorSemestre.json'), 'utf8'));
    
    // Generar embeddings por semestre
    for (const semestre of cursosPorSemestre.semestres) {
      const cursosTexto = semestre.cursos.map(curso => 
        `${curso.nombre} (${curso.creditos} cr√©ditos${curso.requisitos.length > 0 ? ', requisitos: ' + curso.requisitos.join(', ') : ''})`
      ).join(', ');
      
      const textoSemestre = `Semestre ${semestre.semestre}: ${semestre.total_creditos} cr√©ditos totales. Cursos: ${cursosTexto}.`;
      const embeddingSemestre = await generarEmbedding(textoSemestre);
      embeddings.push({
        texto: textoSemestre,
        embedding: embeddingSemestre,
        tipo: `malla_semestre_${semestre.semestre}`
      });
    }
    
    // 4. Informaci√≥n general de cursos por semestre
    const textoGeneralCursos = `La malla curricular tiene ${cursosPorSemestre.semestres.length} semestres con un total de ${cursosPorSemestre.semestres.reduce((total, sem) => total + sem.total_creditos, 0)} cr√©ditos distribuidos en ${cursosPorSemestre.semestres.reduce((total, sem) => total + sem.cursos.length, 0)} cursos.`;
    const embeddingGeneralCursos = await generarEmbedding(textoGeneralCursos);
    embeddings.push({
      texto: textoGeneralCursos,
      embedding: embeddingGeneralCursos,
      tipo: 'malla_general_cursos'
    });
    
    // 5. Cursos Electivos
    // (Eliminado: generaci√≥n de embeddings a partir de CursosElectivos.json porque el archivo ya no existe y la informaci√≥n relevante est√° en el fragmento enriquecido)
    
    // 6. Informaci√≥n general de electivos
    // (Eliminado: generaci√≥n de embeddings a partir de CursosElectivos.json)
    
    // 7. Relaciones de Requisitos
    const relacionesRequisitos = JSON.parse(fs.readFileSync(path.join(__dirname, 'db', 'malla_curricular', 'RelacionesRequisitos.json'), 'utf8'));
    
    // Estad√≠sticas de requisitos
    const estadisticas = relacionesRequisitos.estadisticas;
    const textoEstadisticas = `Estad√≠sticas de requisitos: ${estadisticas.total_cursos_con_prerrequisitos} cursos con prerrequisitos, ${estadisticas.total_cursos_sin_prerrequisitos} cursos sin prerrequisitos. Cursos con m√°s prerrequisitos: ${estadisticas.cursos_con_mas_prerrequisitos.map(c => `${c.nombre} (${c.prerrequisitos})`).join(', ')}.`;
    const embeddingEstadisticas = await generarEmbedding(textoEstadisticas);
    embeddings.push({
      texto: textoEstadisticas,
      embedding: embeddingEstadisticas,
      tipo: 'malla_estadisticas_requisitos'
    });
    
    // 8. Cursos m√°s requeridos
    const cursosRequeridos = estadisticas.cursos_requeridos_por_mas_cursos;
    const textoCursosRequeridos = `Cursos requeridos por m√°s cursos: ${cursosRequeridos.map(c => `${c.nombre} (requerido por ${c.requerido_por} cursos)`).join(', ')}.`;
    const embeddingCursosRequeridos = await generarEmbedding(textoCursosRequeridos);
    embeddings.push({
      texto: textoCursosRequeridos,
      embedding: embeddingCursosRequeridos,
      tipo: 'malla_cursos_requeridos'
    });
    
    // 9. Informaci√≥n general de requisitos
    const textoGeneralRequisitos = `Sistema de requisitos de la malla: ${estadisticas.total_cursos_con_prerrequisitos} cursos tienen prerrequisitos, ${estadisticas.total_cursos_sin_prerrequisitos} cursos no tienen prerrequisitos. Los cursos m√°s fundamentales son requeridos por m√∫ltiples cursos posteriores.`;
    const embeddingGeneralRequisitos = await generarEmbedding(textoGeneralRequisitos);
    embeddings.push({
      texto: textoGeneralRequisitos,
      embedding: embeddingGeneralRequisitos,
      tipo: 'malla_general_requisitos'
    });
    
    // FRAGMENTOS ENRIQUECIDOS PARA COBERTURA SEM√ÅNTICA
    // 0. Electivos
    const fragmentoElectivos = `Los cursos electivos de la carrera se llevan en los semestres 5, 6 y 7. En cada uno de estos semestres, el estudiante debe cursar un electivo, que suele ser asignado por la facultad. Ejemplo de preguntas: ¬øEn qu√© semestre se llevan los electivos? ¬øCu√°ndo se dictan los cursos electivos? semestre donde se lleva electivo, ¬øEn qu√© ciclo se cursan los electivos?, ¬øCu√°ntos electivos hay y cu√°ndo se llevan?`;
    const embeddingFragmentoElectivos = await generarEmbedding(fragmentoElectivos);
    embeddings.push({
      texto: fragmentoElectivos,
      embedding: embeddingFragmentoElectivos,
      tipo: 'enriquecido_electivos'
    });

    // 0.1 Cr√©ditos totales y estructura
    const fragmentoCreditos = `La carrera de Ingenier√≠a Inform√°tica tiene un total de ${infoGeneral.total_creditos} cr√©ditos, distribuidos en 10 semestres. Ejemplo de preguntas: ¬øCu√°ntos cr√©ditos tiene la carrera? ¬øCu√°l es el total de cr√©ditos? cr√©ditos totales de la carrera, ¬øCu√°ntos cr√©ditos se necesitan para egresar?`;
    const embeddingFragmentoCreditos = await generarEmbedding(fragmentoCreditos);
    embeddings.push({
      texto: fragmentoCreditos,
      embedding: embeddingFragmentoCreditos,
      tipo: 'enriquecido_creditos'
    });

    // 0.2 Avance y duraci√≥n
    const fragmentoAvance = `La malla curricular est√° organizada en 10 semestres. El avance t√≠pico es de un semestre por ciclo acad√©mico. Ejemplo de preguntas: ¬øCu√°ntos semestres dura la carrera? ¬øCu√°nto dura la carrera? duraci√≥n de la carrera, ¬øEn cu√°ntos a√±os se termina la carrera?`;
    const embeddingFragmentoAvance = await generarEmbedding(fragmentoAvance);
    embeddings.push({
      texto: fragmentoAvance,
      embedding: embeddingFragmentoAvance,
      tipo: 'enriquecido_avance'
    });

    // 0.3 Requisitos y dependencias
    const fragmentoRequisitos = `Algunos cursos tienen prerrequisitos, es decir, requieren haber aprobado otros cursos antes de poder llevarlos. Ejemplo de preguntas: ¬øQu√© cursos son requisitos para X? ¬øQu√© cursos requieren X como prerrequisito? cursos que dependen de X, ¬øQu√© cursos puedo llevar despu√©s de aprobar X?`;
    const embeddingFragmentoRequisitos = await generarEmbedding(fragmentoRequisitos);
    embeddings.push({
      texto: fragmentoRequisitos,
      embedding: embeddingFragmentoRequisitos,
      tipo: 'enriquecido_requisitos'
    });

    // 0.4 Estructura de la malla
    const fragmentoEstructura = `La malla curricular est√° compuesta por cursos obligatorios, electivos y pr√°cticas preprofesionales. Ejemplo de preguntas: ¬øC√≥mo est√° estructurada la malla curricular? tipos de cursos en la malla, ¬øQu√© tipos de cursos hay? estructura de la malla curricular.`;
    const embeddingFragmentoEstructura = await generarEmbedding(fragmentoEstructura);
    embeddings.push({
      texto: fragmentoEstructura,
      embedding: embeddingFragmentoEstructura,
      tipo: 'enriquecido_estructura'
    });
    
    // Guardar embeddings
    const rutaEmbeddings = path.join(__dirname, 'db', 'embeddings', 'malla_curricular_embeddings.json');
    fs.writeFileSync(rutaEmbeddings, JSON.stringify(embeddings, null, 2));
    
    console.log(`‚úÖ Embeddings de malla curricular generados exitosamente: ${embeddings.length} embeddings`);
    console.log(`üìÅ Guardados en: ${rutaEmbeddings}`);
    
    // Mostrar resumen
    console.log('\nüìä Resumen de embeddings generados:');
    console.log(`1. Informaci√≥n general de la malla`);
    console.log(`2. Estructura de cr√©ditos`);
    console.log(`3. Cursos por semestre (${cursosPorSemestre.semestres.length} semestres)`);
    console.log(`4. Informaci√≥n general de cursos`);
    console.log(`5. Cursos electivos (${cursosElectivos.cursos_electivos.length} grupos)`);
    console.log(`6. Informaci√≥n general de electivos`);
    console.log(`7. Estad√≠sticas de requisitos`);
    console.log(`8. Cursos m√°s requeridos`);
    console.log(`9. Informaci√≥n general de requisitos`);
    
  } catch (error) {
    console.error('‚ùå Error generando embeddings de malla curricular:', error);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  generarEmbeddingsMallaCurricular();
}

module.exports = { generarEmbeddingsMallaCurricular }; 