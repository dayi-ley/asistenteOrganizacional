require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { OpenAI } = require('openai');

// Configurar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Funci√≥n para generar embeddings
async function generateEmbedding(text) {
  try {
    const response = await openai.embeddings.create({
      model: "text-embedding-3-small",
      input: text,
      encoding_format: "float"
    });
    return response.data[0].embedding;
  } catch (error) {
    console.error('Error generando embedding:', error);
    throw error;
  }
}

// Funci√≥n para fragmentar y enriquecer los datos de horarios
function fragmentarDatosHorarios(datos) {
  const fragmentos = [];
  
  // Fragmento 1: Informaci√≥n general del curso de Ingenier√≠a de Sistemas de Informaci√≥n
  const cursoSistemas = datos.cursos.find(curso => 
    curso.nombre_curso === "INGENIER√çA DE SISTEMAS DE INFORMACI√ìN"
  );
  
  if (cursoSistemas) {
    fragmentos.push({
      id: "horarios_curso_sistemas_general",
      contenido: `Curso: INGENIER√çA DE SISTEMAS DE INFORMACI√ìN
C√≥digo: ${cursoSistemas.codigo_curso}
Escuela: ${cursoSistemas.escuela_profesional}
Ciclo: ${cursoSistemas.ciclo}
Secci√≥n: ${cursoSistemas.seccion}
Docente: ${cursoSistemas.docente}
Semestre: ${cursoSistemas.semestre}
Total horas semanales: ${cursoSistemas.total_horas_semanales}
Horas teor√≠a: ${cursoSistemas.total_horas_teoria}
Horas pr√°ctica: ${cursoSistemas.total_horas_practica}
Estado: ${cursoSistemas.estado}`,
      tipo: "informacion_general",
      preguntas_ejemplo: [
        "¬øQui√©n es el docente del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øCu√°ntas horas semanales tiene el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øEn qu√© ciclo se dicta el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øCu√°l es el c√≥digo del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øEn qu√© semestre se dicta el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øCu√°ntas horas de teor√≠a y pr√°ctica tiene el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øEn qu√© secci√≥n est√° el curso de Ingenier√≠a de Sistemas de Informaci√≥n?"
      ]
    });
  }
  
  // Fragmento 2: Horarios detallados del curso de Ingenier√≠a de Sistemas de Informaci√≥n
  if (cursoSistemas && cursoSistemas.horarios) {
    const horariosTexto = cursoSistemas.horarios.map((horario, index) => 
      `${horario.dia} de ${horario.hora_inicio} a ${horario.hora_fin}, Aula ${horario.aula} (${horario.piso} piso), Sesi√≥n: ${horario.tipo_sesion}, Duraci√≥n: ${horario.duracion_minutos} minutos`
    ).join('\n');
    
    fragmentos.push({
      id: "horarios_curso_sistemas_detalle",
      contenido: `Horarios del curso INGENIER√çA DE SISTEMAS DE INFORMACI√ìN:
${horariosTexto}`,
      tipo: "horarios_detallados",
      preguntas_ejemplo: [
        "¬øQu√© d√≠as se dicta el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øCu√°les son los horarios de teor√≠a y pr√°ctica del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øEn qu√© aulas se dicta el curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øCu√°nto dura cada sesi√≥n del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øEn qu√© piso est√°n las aulas del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øA qu√© hora empieza y termina la clase de teor√≠a del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øA qu√© hora empieza y termina la clase de pr√°ctica del curso de Ingenier√≠a de Sistemas de Informaci√≥n?",
        "¬øQu√© tipo de sesi√≥n es cada clase del curso de Ingenier√≠a de Sistemas de Informaci√≥n?"
      ]
    });
  }
  
  // Fragmento 3: Configuraci√≥n general de horarios institucionales
  if (datos.configuracion_horarios) {
    const config = datos.configuracion_horarios;
    fragmentos.push({
      id: "configuracion_horarios_institucional",
      contenido: `Configuraci√≥n de horarios institucional:
D√≠as laborables: ${config.dias_laborables.join(', ')}
Horario institucional: ${config.horario_institucional.hora_inicio_jornada} a ${config.horario_institucional.hora_fin_jornada}
Duraci√≥n bloque est√°ndar: ${config.horario_institucional.duracion_bloque_estandar} minutos
Tipos de sesi√≥n: ${config.tipos_sesion.join(', ')}`,
      tipo: "configuracion_general",
      preguntas_ejemplo: [
        "¬øCu√°les son los d√≠as laborables en la instituci√≥n?",
        "¬øCu√°l es el horario institucional?",
        "¬øCu√°nto dura un bloque est√°ndar de clase?",
        "¬øQu√© tipos de sesi√≥n existen?",
        "¬øQu√© d√≠as se pueden programar clases?",
        "¬øDesde qu√© hora hasta qu√© hora funciona la instituci√≥n?",
        "¬øQu√© tipos de sesiones se pueden realizar en la instituci√≥n?"
      ]
    });
  }
  
  return fragmentos;
}

// Funci√≥n principal
async function generarEmbeddingsHorarios() {
  try {
    console.log('üîÑ Iniciando generaci√≥n de embeddings para HorariosCursos...');
    
    // Leer el archivo de datos
    const rutaArchivo = path.join(__dirname, '../datos_operativos/HorariosCursos.json');
    const datos = JSON.parse(fs.readFileSync(rutaArchivo, 'utf8'));
    
    // Fragmentar los datos
    const fragmentos = fragmentarDatosHorarios(datos);
    console.log(`üìù Generados ${fragmentos.length} fragmentos de datos`);
    
    // Generar embeddings para cada fragmento
    const embeddings = [];
    
    for (const fragmento of fragmentos) {
      console.log(`üîç Generando embedding para: ${fragmento.id}`);
      
      const embedding = await generateEmbedding(fragmento.contenido);
      
      embeddings.push({
        id: fragmento.id,
        contenido: fragmento.contenido,
        embedding: embedding,
        tipo: fragmento.tipo,
        preguntas_ejemplo: fragmento.preguntas_ejemplo,
        fuente: "HorariosCursos.json",
        timestamp: new Date().toISOString()
      });
    }
    
    // Guardar embeddings
    const rutaSalida = path.join(__dirname, 'embeddings_horarios.json');
    fs.writeFileSync(rutaSalida, JSON.stringify(embeddings, null, 2));
    
    console.log(`‚úÖ Embeddings generados exitosamente: ${embeddings.length} fragmentos`);
    console.log(`üìÅ Guardado en: ${rutaSalida}`);
    
    // Mostrar resumen
    console.log('\nüìä Resumen de fragmentos generados:');
    fragmentos.forEach(f => {
      console.log(`  - ${f.id} (${f.tipo}): ${f.preguntas_ejemplo.length} preguntas ejemplo`);
    });
    
  } catch (error) {
    console.error('‚ùå Error generando embeddings:', error);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  generarEmbeddingsHorarios();
}

module.exports = {
  generarEmbeddingsHorarios,
  fragmentarDatosHorarios
}; 